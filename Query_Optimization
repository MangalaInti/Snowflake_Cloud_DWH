
Snowflake doesnt require much of query tuning because of its unique architecture and micro-partition storage mechanism
However some performance inprovements can be considered

1. Scaling up the size of virtual WH (vertically) to provide more processing power for complex queries
2. Scale out (Horizontally) on multi-cluster VwH to provide more capacity for handling many concurrent users and concurrent queries
3. Using clustering keys to redistribute data in micro-partitions to achieve better partition purning
4. Built-in cache mechanisum improve performance behind scenes
5. Using MV to precompute results of complex, frequently executing queries
6. Scaling down means resizing the virtual warehouse to a smaller size. Typically a virtual warehouse is scaled down as a response 
   to decreased query complexity.   Nodes are de-provisioned when a virtual warehouse is scaled down.

Caching helps to improve the query performance  and reduce latency.
Many SQL engines keeps the frequently accessed data in cache which improves respose time of a query

--Caching
-  It is automatic process to speed up the process
-  If query is executed twice, results are cached and can be re-used
-  Results are cached for 24 hrs or until underlaying data has changed.

Types of cache in snowflake 
 1. Metadata Cache
 2. Query result cache
 3. Virtual warehouse Local Disk cache


Query result cache : -
When Snowflake runs a query, it caches the results of that query. The stored result is known as query cache.
if the same query is executed, there have been no changes to the data in the tables being queried. 
Result cache will valid for 24 hrs
The query history page can show the history of queries executed in the last 14 days.

 Metadata Cache :- 
Statistics are kept in the metadata cache in the cloud services layer for each table, micro-partition, and column. 
The metadata cache can return results if the query simply counts the number of rows.

Metadata cache or cloud services operations do not require an active virtual warehouse. 

--What is a cluster key
-subset of rows to locate the data in micro-partition.
-Columns that are used most frequently in WHERE clause - often DATE columns 
- Join keys

--Micro-partition

Snowflake tables are divided into micro-partitions. Each partition contains 50MB to 500MB of uncompressed data
Rows in tables are organized in columnar fashion

What are micro-partition?
Micro-partitions are snowflake's internal data storage format. Snowflake compresses data before storing in micro-partition.
micro-partitions are immutable and new or changed data must be added to a new micro-partition

For Micro-parition snowflake stores 
 - Range of values (min/max) values
 - Number of distinct values
 - NULL count

--How does micro-partition work
Cloud service will store metadata like min, max, distinct values and number of records for each partition

--MV
MV can be created on top of external tables to improve their query performance.
Compute : background maintenance is performed on MV to keep them up date with their base table
Storage : Each MV stores its query result, adding to monhtly storage usage of an account


--Clustering
Clustering represents the way data is grouped together and stored within Snowflake's micro-partitions. It is a subset of snowflake table
where data is stored
Clustering key is hlpful in large tables to perform DML operations

Data clustering is process of partitioning the data  in such a way that it should be optimized.
In general data is sorted or ordered

--SHOW TABLES LIKE 'o_%';

Snowflake credits are used to organize the data into correct partitions as it is added to the table.
Micro-partitions are immutable objects.Once created it is not modified by snowflake rather re-created based on DML operations.

--Determination Clustering keys
frequently used in the WHERE clause or other selective filters. Additionally, columns that are used for joining can also be considered
column with lower cardinality value is best choice for clustering key e.g Gender column(M, F)

**Materialize views**
 - A Materialize view (MV) is type view that stores precomputed data based on SELECT query.
 - Materialized view store the query results physically. This can significantly enchance the query performance especially for complex and frequently run queries
 - Snowflake automatically updates MV when the underlying data changes, ensuring data remains current

--When should  we go for MV views

Underlaying data or base tale is not changing frequently then we go for MV
Queries involve complex calculations or aggregations
It is avaliable only in Enterprise edition
It comes with certain limitations - Joins (self joins) are not supported

--How are materialized views updated if the underlying data has changed?

Snowflake automatically updates MV when the underlying data changes, ensuring data remains current.
However, you can also manually refresh MV if needed.

What is the pupose of MV?
speed up expensive and complex views
They improve performance also incur additional storage and manintenance cost




--Partition pruning
It Partition pruning is an optimization technique, where Snowflake can eliminate unneeded partitions while executing a query.
This process of eliminating  unneeded micro-partitions is also known as partition pruning
 --How to enable pruning
   1. Use Filter conditions on the columns that are frequently queried
   


--Virtual WH
The following strategies may be applied to improve the performance of a virtual warehouse.
1. Reduce queuing
2. Resolve memory spillage.
3. Increase warehouse size.
4. Try query acceleration.
5. Optimize the warehouse cache.
6. Limit concurrently running queries.


--Elastic Compute
Multi-cluster virtual warehouses are utilized when the number of concurrent users exceeds a single virtual warehouse's capacity. 
When the concurrent workload for a virtual warehouse reaches the maximum, new queries are queued. Multi-cluster virtual warehouses address 
this by adding clusters as needed. When the demand drops, the extra clusters are removed.



